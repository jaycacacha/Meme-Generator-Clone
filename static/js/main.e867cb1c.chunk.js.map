{"version":3,"sources":["Meme-gen/meme.js","Meme-Generated/meme-generated.js","App/App.js","reportWebVitals.js","index.js"],"names":["Meme","useState","memes","setMemes","memeIndex","captions","setCaptions","history","useHistory","useEffect","fetch","then","res","json","_memes","data","array","i","length","j","Math","floor","random","temp","shuffleMemes","Array","box_count","fill","className","onClick","currentMeme","formData","FormData","append","id","forEach","c","index","method","body","success","push","url","window","location","reload","map","onChange","e","text","target","value","updateCaption","alt","src","MemeGenerated","copied","setCopied","clipboard","useClipboard","useLocation","URLSearchParams","search","get","copy","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e867cb1c.chunk.js","sourcesContent":["import React, { useEffect, useState, setCaptions } from \"react\";\r\nimport \"./meme.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Meme = () => {\r\n  const [memes, setMemes] = useState([]);\r\n  const [memeIndex, setMemeIndex] = useState([0]);\r\n  const [captions, setCaptions] = useState([]);\r\n  const history = useHistory();\r\n\r\n  //Shuffle meme img id from api\r\n  const shuffleMemes = (array) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * i);\r\n      const temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n  };\r\n  //update caption\r\n  const updateCaption = (e, index) => {\r\n    const text = e.target.value || \"\";\r\n    setCaptions(\r\n      captions.map((c, i) => {\r\n        if (index === i) {\r\n          return text;\r\n        } else {\r\n          return c;\r\n        }\r\n      })\r\n    );\r\n  };\r\n\r\n  //Fetch images from imgflip api\r\n  useEffect(() => {\r\n    fetch(\"https://api.imgflip.com/get_memes\").then((res) => {\r\n      res.json().then((res) => {\r\n        const _memes = res.data.memes;\r\n        shuffleMemes(_memes);\r\n        setMemes(_memes);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  //make account for imgflip.com\r\n  const generateMeme = () => {\r\n    const currentMeme = memes[memeIndex];\r\n    const formData = new FormData();\r\n\r\n    formData.append(\"username\", \"bishapo\");\r\n    formData.append(\"password\", \"helloworld123\");\r\n    formData.append(\"template_id\", currentMeme.id);\r\n    captions.forEach((c, index) => formData.append(`boxes[${index}][text]`, c));\r\n\r\n    //Fetch image with caption\r\n    fetch(\"https://api.imgflip.com/caption_image\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    }).then((res) => {\r\n      res.json().then((res) => {\r\n        res.success === true ? (\r\n          history.push(`/generated?url=${res.data.url}`)\r\n        ) : (\r\n          //clicked generate button but empty caption\r\n          //do nothing\r\n          <></>\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n  //Set caption\r\n  useEffect(() => {\r\n    if (memes.length) {\r\n      setCaptions(Array(memes[memeIndex].box_count).fill(\"\"));\r\n    }\r\n  }, [memeIndex, memes]);\r\n\r\n  return memes.length ? (\r\n    <div className=\"memeContainer\">\r\n      <button className=\"generateBtn\" onClick={generateMeme}>\r\n        Generate\r\n      </button>\r\n      <button className=\"skipBtn\" onClick={() => window.location.reload(false)}>\r\n        Skip\r\n      </button>\r\n      {captions.map((c, index) => (\r\n        <input onChange={(e) => updateCaption(e, index)} key={index} />\r\n      ))}\r\n\r\n      <img alt=\"meme\" src={memes[memeIndex].url} />\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { useClipboard } from \"use-clipboard-copy\";\r\nimport \"./meme-generated.css\";\r\n\r\nexport const MemeGenerated = () => {\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const clipboard = useClipboard();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const url = new URLSearchParams(location.search).get(\"url\");\r\n\r\n  const copyLink = () => {\r\n    clipboard.copy(url);\r\n    setCopied(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"generatedContainer\">\r\n      <button className=\"homeBtn\" onClick={() => history.push(\"/\")}>\r\n        Make More Memes\r\n      </button>\r\n      <button className=\"copyBtn\" onClick={copyLink}>\r\n        {copied ? \"Link copied!\" : \"Copy link\"}\r\n      </button>\r\n      {url && <img id=\"img-generated\" alt=\"meme\" src={url} />}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Meme } from \"../Meme-gen/meme\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { MemeGenerated } from \"../Meme-Generated/meme-generated.js\";\nimport \"./App.css\";\n\nexport const App = () => {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Meme Generator</h1>\n      <Switch>\n        <Route exact path=\"/\">\n          <Meme />\n        </Route>\n        <Route path=\"/generated\">\n          <MemeGenerated />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App/App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}